import asyncio
import os
import logging
import sqlite3
import pathlib
import codecs
import httpx
import openai
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ChatAction
from aiogram.filters import Command
from datetime import datetime

from aiogram.fsm.storage.memory import MemoryStorage, SimpleEventIsolation
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from db import init_db
from keyboards import main_keyboard



load_dotenv()
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
dp = Dispatcher(
    storage=MemoryStorage(),
    events_isolation=SimpleEventIsolation()
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
# client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
client = openai.AsyncOpenAI(
    api_key=os.getenv('OPENAI_API_KEY'),
    http_client=httpx.AsyncClient(
        proxy=os.getenv('PROXY_URL'),
    )
)

# –ø–æ–¥–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
def load_prompt(file_path: str) -> str:
    try:
        return pathlib.Path(file_path).read_text(encoding='utf-8')
    except FileNotFoundError:
        logging.error(f'File {file_path} not found')
        return 'None'

LEGAL_ASSISTANT_PROMPT = load_prompt('prompts/legal_prompt.md')
PROMPTS = {
        'law_labor': open('prompts/work.md').read(),
        'law_housing': open('prompts/housing.md').read(),
        'law_civil': open('prompts/civil.md').read(),
        'law_family': open('prompts/family.md').read(),
        'generate_contract': codecs.open( "prompts/contract.md", "r", "utf_8_sig" )
    }


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command('start'))
async def send_welcome(message: types.Message):
    welcome_text = """
    üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–Æ—Ä–∏—Å—Ç GPT*!

    –Ø - –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.

    –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
    - –ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã?
    - –ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–∑–≤–æ–¥–∞?
    - –ß—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ–º —É–≤–æ–ª—å–Ω–µ–Ω–∏–∏?

    ‚ö†Ô∏è *–í–∞–∂–Ω–æ*: –º–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∂–∏–≤–æ–≥–æ —é—Ä–∏—Å—Ç–∞.
    """
    await message.reply(welcome_text)
    await message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ', reply_markup=main_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command('help'))
async def send_help(message: types.Message):
    help_text = """
    üìù *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*

    –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.

    –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
    - –ö–∞–∫ –ø–æ–¥–∞—Ç—å –≤ —Å—É–¥ –Ω–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è?
    - –ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ —É –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã?
    - –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ?

    ‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
    - –Ø –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å –≤–∞—Å –≤ —Å—É–¥–µ
    - –ú–æ–∏ –æ—Ç–≤–µ—Ç—ã –Ω–æ—Å—è—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä
    - –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∂–∏–≤–æ–º—É —é—Ä–∏—Å—Ç—É

    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.
    """
    await message.reply(help_text)


async def generate_and_save_response(
        bot: Bot,
        user_id: int,
        chat_id: int,
        user_message: str,
        reply_to_message_id: int = None,
        is_regenerate: bool = False,
        prompt: str | None = None
):
    try:
        await bot.send_chat_action(chat_id, ChatAction.TYPING)
        processed_message = f'{user_message} (variant 2)' if is_regenerate else user_message
        save_message(user_id, [{'role': 'user', 'content': processed_message}])
        history = get_conversation_history(user_id)
        messages = [{'role': 'system', 'content': LEGAL_ASSISTANT_PROMPT}] + history
        if prompt:
            messages.append({'role': 'system', 'content': prompt})

        temperature = 0.9 if is_regenerate else 0.7

        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages,
            temperature=temperature,
            max_tokens=600
        )

        answer = response.choices[0].message.content
        save_message(user_id, [{'role': 'system', 'content': answer}])

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")],
            [InlineKeyboardButton(text='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data='generate_again')]
        ])

        if reply_to_message_id:
            await bot.edit_message_text(
                chat_id=chat_id,
                message_id=reply_to_message_id,
                text=answer,
                reply_markup=keyboard
            )
        else:
            await bot.send_message(
                chat_id=chat_id,
                text=answer,
                reply_markup=keyboard,
                reply_to_message_id=reply_to_message_id
            )

        return True

    except Exception as e:
        logging.error(f"Error in generate_and_save_response: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
        )
        return False


@dp.message()
async def message_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await generate_and_save_response(
        bot=bot,
        user_id=message.from_user.id,
        chat_id=message.chat.id,
        user_message=message.text
    )

@dp.callback_query(lambda c: c.data == 'generate_again')
async def handle_regenerate(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    history = get_conversation_history(callback_query.from_user.id)
    last_user_message = next(
        (m['content'] for m in history[::-1] if m['role'] == 'user'),
        None
    )

    if not last_user_message:
        await callback_query.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        return

    await generate_and_save_response(
        bot=bot,
        user_id=callback_query.from_user.id,
        chat_id=callback_query.message.chat.id,
        user_message=last_user_message,
        reply_to_message_id=callback_query.message.message_id,
        is_regenerate=True
    )


# –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É

@dp.callback_query(lambda c: c.data.startswith('law_') | c.data.startswith('generate'))
async def process_law_question(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)

    if callback_query.data:
        await generate_and_save_response(
            bot=bot,
            user_id=callback_query.from_user.id,
            chat_id=callback_query.message.chat.id,
            user_message=callback_query.text,
            reply_to_message_id=callback_query.message.message_id,
            prompt=PROMPTS[callback_query.data]
        )


@dp.callback_query(lambda c: c.data == 'clear_history')
async def clear_history(callback_query: types.CallbackQuery):
    conn = sqlite3.connect('chat_history.db')
    cursor = conn.cursor()

    cursor.execute('''
    DELETE FROM messages
    WHERE user_id = ?
    ''',
                   (callback_query.from_user.id,)
    )

    conn.commit()
    conn.close()
    await bot.answer_callback_query(callback_query.id, '–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞')


def save_message(user_id: int, messages: list):
    conn = sqlite3.connect('chat_history.db')
    cursor = conn.cursor()

    for message in messages:
        cursor.execute('''
        INSERT INTO messages (user_id, role, content, timestamp) 
        VALUES (?, ?, ?, ?)
        ''',
        (user_id, message['role'], message['content'], datetime.now().isoformat()))

    conn.commit()
    conn.close()

def get_conversation_history(user_id: int, limit: int = 10):
    conn = sqlite3.connect('chat_history.db')
    cursor = conn.cursor()

    cursor.execute('''
    SELECT role, content FROM messages
    WHERE user_id = ?
    ORDER BY timestamp DESC
    LIMIT ?''',
    (user_id, limit))

    history = [{'role': row[0], 'content': row[1]} for row in cursor.fetchall()]
    conn.close()

    return history[::-1]

async def main():
    init_db()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, skip_updates=True)



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(main())

